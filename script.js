/**
 * BPMN Process Viewer - JavaScript
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º BPMN –¥–∏–∞–≥—Ä–∞–º–º
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let bpmnViewer = null;
let currentDiagram = null;
let currentBPMN = null;
let fileViewer = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('ü§ñ AI BPMN Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    initializeBpmnViewer();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è —Ñ–∞–π–ª–æ–≤
    initializeFileViewer();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
    setupFileDrop();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer
 */
function initializeBpmnViewer() {
    try {
        const canvas = document.getElementById('canvas');
        if (!canvas) {
            throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ BPMN Viewer
        bpmnViewer = new BpmnJS({
            container: canvas,
            width: '100%',
            height: '100%'
        });

        console.log('‚úÖ BPMN Viewer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π BPMN Viewer
        bpmnViewer.on('import.done', function(event) {
            const { error } = event;
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BPMN:', error);
                showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: ${error.message}`);
            } else {
                console.log('‚úÖ BPMN –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                hideLoading();
                hideError();
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                setTimeout(() => {
                    zoomToFit();
                }, 100);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        bpmnViewer.on('element.click', function(event) {
            const element = event.element;
            console.log('üîç –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É:', element.businessObject?.name || element.id);
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
            showElementDetails(element);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BPMN Viewer:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ BPMN');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
async function loadDiagram(filename) {
    if (!bpmnViewer) {
        console.error('‚ùå BPMN Viewer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
    }

    try {
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã: ${filename}`);
        showLoading();
        hideError();

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        const response = await fetch(filename);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const bpmnXML = await response.text();
        currentDiagram = filename;

        // –ò–º–ø–æ—Ä—Ç –≤ BPMN Viewer
        await bpmnViewer.importXML(bpmnXML);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        updateDiagramTitle(filename);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã:', error);
        hideLoading();
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É';
        if (error.message.includes('404')) {
            errorMessage = `–§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.`;
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else {
            errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
        
        showError(errorMessage);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoading() {
    const loading = document.getElementById('loading');
    const canvas = document.getElementById('canvas');
    const error = document.getElementById('error');
    
    if (loading) loading.style.display = 'flex';
    if (canvas) canvas.style.display = 'none';
    if (error) error.style.display = 'none';
}

/**
 * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoading() {
    const loading = document.getElementById('loading');
    const canvas = document.getElementById('canvas');
    
    if (loading) loading.style.display = 'none';
    if (canvas) canvas.style.display = 'block';
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
 */
function showError(message) {
    const error = document.getElementById('error');
    const errorMessage = document.getElementById('error-message');
    const loading = document.getElementById('loading');
    const canvas = document.getElementById('canvas');
    
    if (errorMessage) errorMessage.textContent = message;
    if (error) error.style.display = 'flex';
    if (loading) loading.style.display = 'none';
    if (canvas) canvas.style.display = 'none';
}

/**
 * –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É
 */
function hideError() {
    const error = document.getElementById('error');
    if (error) error.style.display = 'none';
}

/**
 * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function retryLoad() {
    if (currentDiagram) {
        loadDiagram(currentDiagram);
    } else {
        loadDiagram('product_development_process_v2.bpmn');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
function updateDiagramTitle(filename) {
    const title = document.querySelector('.viewer-header h3');
    if (title) {
        const displayName = filename.includes('v2') ? 
            'BPMN –î–∏–∞–≥—Ä–∞–º–º–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –í–µ—Ä—Å–∏—è' : 
            'BPMN –î–∏–∞–≥—Ä–∞–º–º–∞ - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –í–µ—Ä—Å–∏—è';
        title.textContent = displayName;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º
 */
function zoomIn() {
    if (bpmnViewer) {
        const zoomScroll = bpmnViewer.get('zoomScroll');
        zoomScroll.stepZoom(1);
    }
}

function zoomOut() {
    if (bpmnViewer) {
        const zoomScroll = bpmnViewer.get('zoomScroll');
        zoomScroll.stepZoom(-1);
    }
}

function zoomReset() {
    if (bpmnViewer) {
        const canvas = bpmnViewer.get('canvas');
        canvas.zoom('fit-viewport');
    }
}

function zoomToFit() {
    if (bpmnViewer) {
        const canvas = bpmnViewer.get('canvas');
        canvas.zoom('fit-viewport', 'auto');
    }
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
 */
async function downloadSVG() {
    if (!bpmnViewer) return;

    try {
        const result = await bpmnViewer.saveSVG();
        const { svg } = result;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        const blob = new Blob([svg], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        
        link.href = url;
        link.download = `${currentDiagram || 'bpmn-diagram'}.svg`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('‚úÖ SVG –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–∫–∞—á–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è SVG:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
}

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
 */
function showElementDetails(element) {
    const businessObject = element.businessObject;
    if (!businessObject) return;

    const details = {
        id: element.id,
        name: businessObject.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        type: businessObject.$type?.replace('bpmn:', '') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    };

    console.log('üìã –î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', details);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    // showModal(details);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
function setupNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            if (this.getAttribute('href').startsWith('#')) {
                e.preventDefault();
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                navLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–µ–∫—Ü–∏–∏
                const targetId = this.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }
        });
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', debounce(() => {
        if (bpmnViewer) {
            bpmnViewer.get('canvas').resized();
        }
    }, 250));

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case '=':
                case '+':
                    e.preventDefault();
                    zoomIn();
                    break;
                case '-':
                    e.preventDefault();
                    zoomOut();
                    break;
                case '0':
                    e.preventDefault();
                    zoomReset();
                    break;
            }
        }
    });
}

/**
 * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
 */
function checkBrowserSupport() {
    const isSupported = !!(
        window.fetch &&
        window.Promise &&
        window.URL &&
        document.querySelector
    );

    if (!isSupported) {
        showError('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.');
        return false;
    }

    return true;
}

/**
 * –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function trackEvent(action, label) {
    console.log(`üìä Event: ${action} - ${label}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Analytics –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (!checkBrowserSupport()) {
    console.error('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.loadDiagram = loadDiagram;
window.zoomIn = zoomIn;
window.zoomOut = zoomOut;
window.zoomReset = zoomReset;
window.downloadSVG = downloadSVG;
window.retryLoad = retryLoad;

/**
 * AI BPMN Generator - JavaScript
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ BPMN 2.0 –¥–∏–∞–≥—Ä–∞–º–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
 */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('ü§ñ AI BPMN Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    initializeBpmnViewer();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è —Ñ–∞–π–ª–æ–≤
    initializeFileViewer();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
    setupFileDrop();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */
function initializeBpmnViewer() {
    try {
        const canvas = document.getElementById('bpmn-canvas');
        if (!canvas) {
            throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        bpmnViewer = new BpmnJS({
            container: canvas,
            width: '100%',
            height: '100%'
        });

        console.log('‚úÖ BPMN Viewer –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π BPMN Viewer
        bpmnViewer.on('import.done', function(event) {
            const { error } = event;
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BPMN:', error);
                showGenerationError(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: ${error.message}`);
            } else {
                console.log('‚úÖ BPMN –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
                setTimeout(() => {
                    zoomToFit(bpmnViewer);
                }, 100);
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BPMN Viewer:', error);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è —Ñ–∞–π–ª–æ–≤
 */
function initializeFileViewer() {
    try {
        const canvas = document.getElementById('file-canvas');
        if (!canvas) {
            throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        fileViewer = new BpmnJS({
            container: canvas,
            width: '100%',
            height: '100%'
        });

        console.log('‚úÖ BPMN Viewer –¥–ª—è —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        fileViewer.on('import.done', function(event) {
            const { error } = event;
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞:', error);
            } else {
                setTimeout(() => {
                    zoomToFit(fileViewer);
                }, 100);
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞:', error);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
async function generateBPMN() {
    const description = document.getElementById('process-description').value.trim();
    
    if (!description) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π');
        return;
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é BPMN –∏–∑ —Ç–µ–∫—Å—Ç–∞:', description);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    showGenerationStatus('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    
    try {
        // –ò–º–∏—Ç–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API)
        await simulateAIAnalysis(description);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º BPMN XML
        const bpmnXML = generateBPMNFromText(description);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        currentBPMN = bpmnXML;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await displayGeneratedBPMN(bpmnXML);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        showGeneratedBPMN();
        
        console.log('‚úÖ BPMN –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BPMN:', error);
        showGenerationError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
 */
async function simulateAIAnalysis(description) {
    const steps = [
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–∞...',
        '–û–ø—Ä–µ–¥–µ–ª—è—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–æ–ª–∏...',
        '–í—ã—è–≤–ª—è—é –∑–∞–¥–∞—á–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å...',
        '–°–æ–∑–¥–∞—é –ø–æ—Ç–æ–∫–∏ –∏ —à–ª—é–∑—ã...',
        '–§–æ—Ä–º–∏—Ä—É—é BPMN 2.0 XML...'
    ];
    
    for (let i = 0; i < steps.length; i++) {
        updateGenerationStatus(steps[i]);
        await new Promise(resolve => setTimeout(resolve, 800));
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è BPMN XML –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function generateBPMNFromText(description) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    const processElements = analyzeProcessText(description);
    
    // –°–æ–∑–¥–∞–µ–º BPMN 2.0 XML
    const bpmnXML = createBPMNXML(processElements);
    
    return bpmnXML;
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
function analyzeProcessText(text) {
    const lines = text.split('\n').filter(line => line.trim());
    const elements = {
        participants: [],
        tasks: [],
        decisions: [],
        sequence: []
    };
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI)
    lines.forEach((line, index) => {
        const trimmed = line.trim();
        if (trimmed.match(/^\d+\./)) {
            // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–¥–∞—á–∞
            const taskName = trimmed.replace(/^\d+\.\s*/, '');
            elements.tasks.push({
                id: `Task_${index + 1}`,
                name: taskName,
                participant: extractParticipant(taskName)
            });
        } else if (trimmed.includes('–µ—Å–ª–∏') || trimmed.includes('–ï—Å–ª–∏')) {
            // –£—Å–ª–æ–≤–∏–µ - —Ä–µ—à–µ–Ω–∏–µ
            elements.decisions.push({
                id: `Decision_${index + 1}`,
                name: trimmed,
                condition: extractCondition(trimmed)
            });
        }
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    elements.participants = [...new Set(elements.tasks.map(t => t.participant).filter(Boolean))];
    
    return elements;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function extractParticipant(text) {
    const participants = [
        '–∫–ª–∏–µ–Ω—Ç', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'QA', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
        '–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
        '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–æ—Ç–¥–µ–ª'
    ];
    
    for (const participant of participants) {
        if (text.toLowerCase().includes(participant)) {
            return participant.charAt(0).toUpperCase() + participant.slice(1);
        }
    }
    
    return '–£—á–∞—Å—Ç–Ω–∏–∫';
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function extractCondition(text) {
    if (text.includes('–µ—Å–ª–∏') || text.includes('–ï—Å–ª–∏')) {
        return text.replace(/^.*?(–µ—Å–ª–∏|–ï—Å–ª–∏)\s*/i, '').replace(/[.,].*$/, '');
    }
    return text;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ BPMN 2.0 XML
 */
function createBPMNXML(elements) {
    const processId = 'Process_' + Date.now();
    
    let xml = `<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" 
                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" 
                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" 
                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" 
                  id="Definitions_1" 
                  targetNamespace="http://bpmn.io/schema/bpmn">
  
  <bpmn:process id="${processId}" isExecutable="false">
    <bpmn:startEvent id="StartEvent_1" name="–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞">
      <bpmn:outgoing>Flow_1</bpmn:outgoing>
    </bpmn:startEvent>`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    elements.tasks.forEach((task, index) => {
        const flowId = `Flow_${index + 1}`;
        const nextFlowId = `Flow_${index + 2}`;
        
        xml += `
    <bpmn:task id="${task.id}" name="${task.name}">
      <bpmn:incoming>${flowId}</bpmn:incoming>
      <bpmn:outgoing>${nextFlowId}</bpmn:outgoing>
    </bpmn:task>
    
    <bpmn:sequenceFlow id="${flowId}" sourceRef="${index === 0 ? 'StartEvent_1' : elements.tasks[index - 1].id}" targetRef="${task.id}" />
    
    <bpmn:sequenceFlow id="${nextFlowId}" sourceRef="${task.id}" targetRef="${index === elements.tasks.length - 1 ? 'EndEvent_1' : elements.tasks[index + 1].id}" />`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    xml += `
    
    <bpmn:endEvent id="EndEvent_1" name="–ö–æ–Ω–µ—Ü –ø—Ä–æ—Ü–µ—Å—Å–∞">
      <bpmn:incoming>Flow_${elements.tasks.length + 1}</bpmn:incoming>
    </bpmn:endEvent>
  </bpmn:process>
  
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="${processId}">
      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>`;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –∑–∞–¥–∞—á
    elements.tasks.forEach((task, index) => {
        const x = 250 + index * 200;
        xml += `
      <bpmndi:BPMNShape id="${task.id}_di" bpmnElement="${task.id}">
        <dc:Bounds x="${x}" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    const endX = 250 + elements.tasks.length * 200;
    xml += `
      
      <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">
        <dc:Bounds x="${endX}" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>`;

    return xml;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
async function displayGeneratedBPMN(bpmnXML) {
    if (!bpmnViewer) {
        throw new Error('BPMN Viewer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º XML –≤ viewer
        await bpmnViewer.importXML(bpmnXML);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º XML –∫–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        document.getElementById('xml-output').textContent = bpmnXML;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è BPMN:', error);
        throw error;
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function showGenerationStatus(message) {
    const status = document.getElementById('generation-status');
    const messageEl = document.getElementById('status-message');
    
    if (status) status.style.display = 'block';
    if (messageEl) messageEl.textContent = message;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function updateGenerationStatus(message) {
    const messageEl = document.getElementById('status-message');
    if (messageEl) messageEl.textContent = message;
}

/**
 * –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function hideGenerationStatus() {
    const status = document.getElementById('generation-status');
    if (status) status.style.display = 'none';
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function showGenerationError(message) {
    hideGenerationStatus();
    alert(`–û—à–∏–±–∫–∞: ${message}`);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é BPMN
 */
function showGeneratedBPMN() {
    hideGenerationStatus();
    
    const generated = document.getElementById('generated-bpmn');
    if (generated) generated.style.display = 'block';
    
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    generated.scrollIntoView({ behavior: 'smooth' });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
 */
function loadExample(type = 'default') {
    const examples = {
        default: `1. –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
2. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
3. –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
4. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ç –∏ –ø–µ—Ä–µ–¥–∞—é—Ç –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
5. QA —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
6. –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É`,
        
        ecommerce: `1. –ö–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ
2. –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
3. –û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
4. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
5. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è
6. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏
8. –¢–æ–≤–∞—Ä—ã —É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É
9. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É`,
        
        medical: `1. –ü–∞—Ü–∏–µ–Ω—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É
2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞
3. –ü–∞—Ü–∏–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞
4. –í—Ä–∞—á –ø—Ä–æ–≤–æ–¥–∏—Ç –æ—Å–º–æ—Ç—Ä –∏ —Å—Ç–∞–≤–∏—Ç –¥–∏–∞–≥–Ω–æ–∑
5. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –∞–Ω–∞–ª–∏–∑—ã
6. –ü–∞—Ü–∏–µ–Ω—Ç —Å–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
7. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤—Ä–∞—á—É
8. –í—Ä–∞—á –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ª–µ—á–µ–Ω–∏–µ
9. –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`,
        
        manufacturing: `1. –û—Ç–¥–µ–ª –∑–∞–∫—É–ø–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —Å—ã—Ä—å—è –Ω–∞ —Å–∫–ª–∞–¥–µ
3. –ï—Å–ª–∏ —Å—ã—Ä—å—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
4. –°—ã—Ä—å–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥
5. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
6. –ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
7. –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
8. –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, –ø—Ä–æ–¥—É–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
9. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏`,
        
        hr: `1. –û—Ç–¥–µ–ª HR –ø–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
2. HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
3. –í–∞–∫–∞–Ω—Å–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
4. –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ä–µ–∑—é–º–µ
5. HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
6. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
7. –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É
8. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª–∞
9. –ü—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞
10. –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`
    };
    
    const description = examples[type] || examples.default;
    document.getElementById('process-description').value = description;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
 */
function clearForm() {
    document.getElementById('process-description').value = '';
    const generated = document.getElementById('generated-bpmn');
    if (generated) generated.style.display = 'none';
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ BPMN —Ñ–∞–π–ª–∞
 */
function downloadBPMN() {
    if (!currentBPMN) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ BPMN –¥–∏–∞–≥—Ä–∞–º–º—É');
        return;
    }
    
    const blob = new Blob([currentBPMN], { type: 'application/xml' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    
    link.href = url;
    link.download = `generated-process-${Date.now()}.bpmn`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('‚úÖ BPMN —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω');
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ XML –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
function copyXML() {
    if (!currentBPMN) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ BPMN –¥–∏–∞–≥—Ä–∞–º–º—É');
        return;
    }
    
    navigator.clipboard.writeText(currentBPMN).then(() => {
        alert('XML –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = currentBPMN;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('XML –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    });
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
 */
function viewInEditor() {
    if (!currentBPMN) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ BPMN –¥–∏–∞–≥—Ä–∞–º–º—É');
        return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ bpmn.io
    const encodedXML = encodeURIComponent(currentBPMN);
    const url = `https://demo.bpmn.io/new?bpmn=${encodedXML}`;
    window.open(url, '_blank');
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ BPMN
 */
function loadSampleBPMN() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü
    const sampleXML = `<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" 
                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" 
                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" 
                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" 
                  id="Definitions_1" 
                  targetNamespace="http://bpmn.io/schema/bpmn">
  
  <bpmn:process id="Process_1" isExecutable="false">
    <bpmn:startEvent id="StartEvent_1" name="–ù–∞—á–∞–ª–æ">
      <bpmn:outgoing>Flow_1</bpmn:outgoing>
    </bpmn:startEvent>
    
    <bpmn:task id="Task_1" name="–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏">
      <bpmn:incoming>Flow_1</bpmn:incoming>
      <bpmn:outgoing>Flow_2</bpmn:outgoing>
    </bpmn:task>
    
    <bpmn:endEvent id="EndEvent_1" name="–ö–æ–Ω–µ—Ü">
      <bpmn:incoming>Flow_2</bpmn:incoming>
    </bpmn:endEvent>
    
    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />
    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />
  </bpmn:process>
  
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
      
      <bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">
        <dc:Bounds x="250" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
      
      <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">
        <dc:Bounds x="412" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>`;
    
    displayFileBPMN(sampleXML);
    showFileViewer();
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ BPMN —Ñ–∞–π–ª–∞
 */
async function displayFileBPMN(bpmnXML) {
    if (!fileViewer) {
        throw new Error('–§–∞–π–ª–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
        await fileViewer.importXML(bpmnXML);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ BPMN —Ñ–∞–π–ª–∞');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
 */
function showFileViewer() {
    const viewer = document.getElementById('file-viewer');
    if (viewer) viewer.style.display = 'block';
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
 */
function setupFileDrop() {
    const fileInput = document.getElementById('bpmn-file-input');
    
    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            loadBPMNFile(file);
        }
    });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ BPMN —Ñ–∞–π–ª–∞
 */
function loadBPMNFile(file) {
    const reader = new FileReader();
    
    reader.onload = function(e) {
        const content = e.target.result;
        displayFileBPMN(content);
        showFileViewer();
    };
    
    reader.onerror = function() {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    };
    
    reader.readAsText(file);
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º
 */
function zoomIn() {
    if (fileViewer) {
        const zoomScroll = fileViewer.get('zoomScroll');
        zoomScroll.stepZoom(1);
    }
}

function zoomOut() {
    if (fileViewer) {
        const zoomScroll = fileViewer.get('zoomScroll');
        zoomScroll.stepZoom(-1);
    }
}

function zoomReset() {
    if (fileViewer) {
        const canvas = fileViewer.get('canvas');
        canvas.zoom('fit-viewport');
    }
}

function zoomToFit(viewer) {
    if (viewer) {
        const canvas = viewer.get('canvas');
        canvas.zoom('fit-viewport', 'auto');
    }
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ SVG –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
async function downloadSVG() {
    if (!fileViewer) return;

    try {
        const result = await fileViewer.saveSVG();
        const { svg } = result;
        
        const blob = new Blob([svg], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        
        link.href = url;
        link.download = 'bpmn-diagram.svg';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('‚úÖ SVG –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–∫–∞—á–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è SVG:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
function setupNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            if (this.getAttribute('href').startsWith('#')) {
                e.preventDefault();
                
                navLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                const targetId = this.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }
        });
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', debounce(() => {
        if (bpmnViewer) {
            bpmnViewer.get('canvas').resized();
        }
        if (fileViewer) {
            fileViewer.get('canvas').resized();
        }
    }, 250));

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case '=':
                case '+':
                    e.preventDefault();
                    zoomIn();
                    break;
                case '-':
                    e.preventDefault();
                    zoomOut();
                    break;
                case '0':
                    e.preventDefault();
                    zoomReset();
                    break;
            }
        }
    });
}

/**
 * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.generateBPMN = generateBPMN;
window.loadExample = loadExample;
window.clearForm = clearForm;
window.downloadBPMN = downloadBPMN;
window.copyXML = copyXML;
window.viewInEditor = viewInEditor;
window.loadSampleBPMN = loadSampleBPMN;
window.zoomIn = zoomIn;
window.zoomOut = zoomOut;
window.zoomReset = zoomReset;
window.downloadSVG = downloadSVG;

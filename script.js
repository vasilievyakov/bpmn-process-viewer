/**
 * BPMN Process Viewer - JavaScript
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º BPMN –¥–∏–∞–≥—Ä–∞–º–º
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let bpmnViewer = null;
let currentDiagram = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ BPMN Process Viewer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer
    initializeBpmnViewer();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    loadDiagram('product_development_process_v2.bpmn');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer
 */
function initializeBpmnViewer() {
    try {
        const canvas = document.getElementById('canvas');
        if (!canvas) {
            throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ BPMN Viewer
        bpmnViewer = new BpmnJS({
            container: canvas,
            width: '100%',
            height: '100%'
        });

        console.log('‚úÖ BPMN Viewer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π BPMN Viewer
        bpmnViewer.on('import.done', function(event) {
            const { error } = event;
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BPMN:', error);
                showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: ${error.message}`);
            } else {
                console.log('‚úÖ BPMN –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                hideLoading();
                hideError();
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                setTimeout(() => {
                    zoomToFit();
                }, 100);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        bpmnViewer.on('element.click', function(event) {
            const element = event.element;
            console.log('üîç –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É:', element.businessObject?.name || element.id);
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
            showElementDetails(element);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BPMN Viewer:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ BPMN');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
async function loadDiagram(filename) {
    if (!bpmnViewer) {
        console.error('‚ùå BPMN Viewer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
    }

    try {
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã: ${filename}`);
        showLoading();
        hideError();

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        const response = await fetch(filename);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const bpmnXML = await response.text();
        currentDiagram = filename;

        // –ò–º–ø–æ—Ä—Ç –≤ BPMN Viewer
        await bpmnViewer.importXML(bpmnXML);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        updateDiagramTitle(filename);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã:', error);
        hideLoading();
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É';
        if (error.message.includes('404')) {
            errorMessage = `–§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.`;
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else {
            errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
        
        showError(errorMessage);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoading() {
    const loading = document.getElementById('loading');
    const canvas = document.getElementById('canvas');
    const error = document.getElementById('error');
    
    if (loading) loading.style.display = 'flex';
    if (canvas) canvas.style.display = 'none';
    if (error) error.style.display = 'none';
}

/**
 * –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoading() {
    const loading = document.getElementById('loading');
    const canvas = document.getElementById('canvas');
    
    if (loading) loading.style.display = 'none';
    if (canvas) canvas.style.display = 'block';
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
 */
function showError(message) {
    const error = document.getElementById('error');
    const errorMessage = document.getElementById('error-message');
    const loading = document.getElementById('loading');
    const canvas = document.getElementById('canvas');
    
    if (errorMessage) errorMessage.textContent = message;
    if (error) error.style.display = 'flex';
    if (loading) loading.style.display = 'none';
    if (canvas) canvas.style.display = 'none';
}

/**
 * –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É
 */
function hideError() {
    const error = document.getElementById('error');
    if (error) error.style.display = 'none';
}

/**
 * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function retryLoad() {
    if (currentDiagram) {
        loadDiagram(currentDiagram);
    } else {
        loadDiagram('product_development_process_v2.bpmn');
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
function updateDiagramTitle(filename) {
    const title = document.querySelector('.viewer-header h3');
    if (title) {
        const displayName = filename.includes('v2') ? 
            'BPMN –î–∏–∞–≥—Ä–∞–º–º–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –í–µ—Ä—Å–∏—è' : 
            'BPMN –î–∏–∞–≥—Ä–∞–º–º–∞ - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –í–µ—Ä—Å–∏—è';
        title.textContent = displayName;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º
 */
function zoomIn() {
    if (bpmnViewer) {
        const zoomScroll = bpmnViewer.get('zoomScroll');
        zoomScroll.stepZoom(1);
    }
}

function zoomOut() {
    if (bpmnViewer) {
        const zoomScroll = bpmnViewer.get('zoomScroll');
        zoomScroll.stepZoom(-1);
    }
}

function zoomReset() {
    if (bpmnViewer) {
        const canvas = bpmnViewer.get('canvas');
        canvas.zoom('fit-viewport');
    }
}

function zoomToFit() {
    if (bpmnViewer) {
        const canvas = bpmnViewer.get('canvas');
        canvas.zoom('fit-viewport', 'auto');
    }
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
 */
async function downloadSVG() {
    if (!bpmnViewer) return;

    try {
        const result = await bpmnViewer.saveSVG();
        const { svg } = result;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        const blob = new Blob([svg], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        
        link.href = url;
        link.download = `${currentDiagram || 'bpmn-diagram'}.svg`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('‚úÖ SVG –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–∫–∞—á–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è SVG:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
}

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
 */
function showElementDetails(element) {
    const businessObject = element.businessObject;
    if (!businessObject) return;

    const details = {
        id: element.id,
        name: businessObject.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        type: businessObject.$type?.replace('bpmn:', '') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    };

    console.log('üìã –î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', details);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    // showModal(details);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
function setupNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            if (this.getAttribute('href').startsWith('#')) {
                e.preventDefault();
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                navLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–µ–∫—Ü–∏–∏
                const targetId = this.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }
        });
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', debounce(() => {
        if (bpmnViewer) {
            bpmnViewer.get('canvas').resized();
        }
    }, 250));

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case '=':
                case '+':
                    e.preventDefault();
                    zoomIn();
                    break;
                case '-':
                    e.preventDefault();
                    zoomOut();
                    break;
                case '0':
                    e.preventDefault();
                    zoomReset();
                    break;
            }
        }
    });
}

/**
 * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
 */
function checkBrowserSupport() {
    const isSupported = !!(
        window.fetch &&
        window.Promise &&
        window.URL &&
        document.querySelector
    );

    if (!isSupported) {
        showError('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.');
        return false;
    }

    return true;
}

/**
 * –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function trackEvent(action, label) {
    console.log(`üìä Event: ${action} - ${label}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Analytics –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (!checkBrowserSupport()) {
    console.error('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.loadDiagram = loadDiagram;
window.zoomIn = zoomIn;
window.zoomOut = zoomOut;
window.zoomReset = zoomReset;
window.downloadSVG = downloadSVG;
window.retryLoad = retryLoad;

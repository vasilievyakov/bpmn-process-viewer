/**
 * AI BPMN Generator Pro - JavaScript
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ BPMN 2.0 –¥–∏–∞–≥—Ä–∞–º–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BPMN.io
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let bpmnModeler = null;
let currentBPMN = null;
let fileViewer = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('ü§ñ AI BPMN Generator Pro –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Modeler –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    initializeBpmnModeler();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è —Ñ–∞–π–ª–æ–≤
    initializeFileViewer();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
    setupFileDrop();
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Modeler –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */
function initializeBpmnModeler() {
    try {
        const canvas = document.getElementById('bpmn-canvas');
        if (!canvas) {
            throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π BPMN Modeler
        bpmnModeler = new BpmnJS({
            container: canvas,
            width: '100%',
            height: '100%'
        });

        console.log('‚úÖ BPMN Modeler –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π BPMN Modeler
        bpmnModeler.on('import.done', function(event) {
            const { error } = event;
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BPMN:', error);
                showGenerationError(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã: ${error.message}`);
            } else {
                console.log('‚úÖ BPMN –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
                setTimeout(() => {
                    zoomToFit(bpmnModeler);
                }, 100);
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BPMN Modeler:', error);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPMN Viewer –¥–ª—è —Ñ–∞–π–ª–æ–≤
 */
function initializeFileViewer() {
    try {
        const canvas = document.getElementById('file-canvas');
        if (!canvas) {
            throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        fileViewer = new BpmnJS({
            container: canvas,
            width: '100%',
            height: '100%'
        });

        console.log('‚úÖ BPMN Viewer –¥–ª—è —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        fileViewer.on('import.done', function(event) {
            const { error } = event;
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞:', error);
            } else {
                setTimeout(() => {
                    zoomToFit(fileViewer);
                }, 100);
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞:', error);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π BPMN 2.0 –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
async function generateBPMN() {
    const description = document.getElementById('process-description').value.trim();
    
    if (!description) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π');
        return;
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π BPMN 2.0 –∏–∑ —Ç–µ–∫—Å—Ç–∞:', description);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    showGenerationStatus('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    
    try {
        // –ò–º–∏—Ç–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API)
        await simulateAIAnalysis(description);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é BPMN 2.0 XML
        const bpmnXML = generateProfessionalBPMNFromText(description);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        currentBPMN = bpmnXML;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await displayGeneratedBPMN(bpmnXML);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        showGeneratedBPMN();
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è BPMN 2.0 –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BPMN:', error);
        showGenerationError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
 */
async function simulateAIAnalysis(description) {
    const steps = [
        '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–∞...',
        '–û–ø—Ä–µ–¥–µ–ª—è—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–æ–ª–∏...',
        '–í—ã—è–≤–ª—è—é –∑–∞–¥–∞—á–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å...',
        '–°–æ–∑–¥–∞—é –ø—É–ª—ã –∏ –¥–æ—Ä–æ–∂–∫–∏...',
        '–î–æ–±–∞–≤–ª—è—é —à–ª—é–∑—ã –∏ –ø–æ—Ç–æ–∫–∏...',
        '–§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é BPMN 2.0 XML...'
    ];
    
    for (let i = 0; i < steps.length; i++) {
        updateGenerationStatus(steps[i]);
        await new Promise(resolve => setTimeout(resolve, 800));
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π BPMN 2.0 XML –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function generateProfessionalBPMNFromText(description) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    const processElements = analyzeProcessTextAdvanced(description);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é BPMN 2.0 XML
    const bpmnXML = createProfessionalBPMNXML(processElements);
    
    return bpmnXML;
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
function analyzeProcessTextAdvanced(text) {
    const lines = text.split('\n').filter(line => line.trim());
    const elements = {
        participants: new Set(),
        tasks: [],
        decisions: [],
        messageFlows: [],
        pools: [],
        lanes: []
    };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    lines.forEach((line, index) => {
        const trimmed = line.trim();
        
        if (trimmed.match(/^\d+\./)) {
            // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–¥–∞—á–∞
            const taskName = trimmed.replace(/^\d+\.\s*/, '');
            const participant = extractParticipantAdvanced(taskName);
            const taskType = determineTaskType(taskName);
            
            elements.tasks.push({
                id: `Task_${index + 1}`,
                name: taskName,
                participant: participant,
                type: taskType,
                index: index
            });
            
            if (participant) {
                elements.participants.add(participant);
            }
        } else if (trimmed.includes('–µ—Å–ª–∏') || trimmed.includes('–ï—Å–ª–∏')) {
            // –£—Å–ª–æ–≤–∏–µ - —Ä–µ—à–µ–Ω–∏–µ
            const condition = extractCondition(trimmed);
            elements.decisions.push({
                id: `Decision_${index + 1}`,
                name: condition,
                condition: condition,
                type: 'exclusiveGateway',
                index: index
            });
        } else if (trimmed.includes('–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ') || trimmed.includes('–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ')) {
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            elements.decisions.push({
                id: `Parallel_${index + 1}`,
                name: trimmed,
                type: 'parallelGateway',
                index: index
            });
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª—ã –∏ –¥–æ—Ä–æ–∂–∫–∏
    elements.pools = createPoolsFromParticipants(Array.from(elements.participants));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    elements.messageFlows = createMessageFlows(elements.tasks, elements.pools);
    
    return elements;
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
 */
function extractParticipantAdvanced(text) {
    const participants = [
        '–∫–ª–∏–µ–Ω—Ç', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'QA', '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
        '–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
        '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–æ—Ç–¥–µ–ª', '—Å–∏—Å—Ç–µ–º–∞',
        '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–ø–æ–¥—Ä—è–¥—á–∏–∫', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '–∞—É–¥–∏—Ç–æ—Ä',
        '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '—Å–∫–ª–∞–¥', '–æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
        '—é—Ä–∏—Å—Ç', '–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä'
    ];
    
    for (const participant of participants) {
        if (text.toLowerCase().includes(participant)) {
            return participant.charAt(0).toUpperCase() + participant.slice(1);
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if (text.toLowerCase().includes('–≤—ã–±–∏—Ä–∞–µ—Ç') || text.toLowerCase().includes('–¥–æ–±–∞–≤–ª—è–µ—Ç') || text.toLowerCase().includes('–æ—Ñ–æ—Ä–º–ª—è–µ—Ç') || text.toLowerCase().includes('–ø–æ–ª—É—á–∞–µ—Ç')) {
        return '–ö–ª–∏–µ–Ω—Ç';
    }
    if (text.toLowerCase().includes('–ø—Ä–æ–≤–µ—Ä—è–µ—Ç') || text.toLowerCase().includes('–ø—Ä–æ–≤–µ—Ä') || text.toLowerCase().includes('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è') || text.toLowerCase().includes('–æ—Ç–º–µ–Ω—è–µ—Ç—Å—è')) {
        return '–°–∏—Å—Ç–µ–º–∞';
    }
    if (text.toLowerCase().includes('–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è') || text.toLowerCase().includes('–ø–µ—Ä–µ–¥–∞—á')) {
        return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
    }
    if (text.toLowerCase().includes('—É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è') || text.toLowerCase().includes('–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è') || text.toLowerCase().includes('—É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç—Å—è') || text.toLowerCase().includes('–æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è')) {
        return '–õ–æ–≥–∏—Å—Ç–∏–∫–∞';
    }
    if (text.toLowerCase().includes('–Ω–∞–ª–∏—á–∏–µ') || text.toLowerCase().includes('—Å–∫–ª–∞–¥')) {
        return '–°–∫–ª–∞–¥';
    }
    
    return '–£—á–∞—Å—Ç–Ω–∏–∫';
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
function extractCondition(text) {
    if (text.includes('–µ—Å–ª–∏') || text.includes('–ï—Å–ª–∏')) {
        return text.replace(/^.*?(–µ—Å–ª–∏|–ï—Å–ª–∏)\s*/i, '').replace(/[.,].*$/, '');
    }
    return text;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
 */
function determineTaskType(taskName) {
    const lowerName = taskName.toLowerCase();
    
    if (lowerName.includes('–ø—Ä–æ–≤–µ—Ä') || lowerName.includes('–∞–Ω–∞–ª–∏–∑') || lowerName.includes('–≤—ã–±–∏—Ä–∞–µ—Ç') || lowerName.includes('–¥–æ–±–∞–≤–ª—è–µ—Ç') || lowerName.includes('–æ—Ñ–æ—Ä–º–ª—è–µ—Ç')) return 'userTask';
    if (lowerName.includes('–æ—Ç–ø—Ä–∞–≤') || lowerName.includes('–ø–µ—Ä–µ–¥–∞—á') || lowerName.includes('–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è')) return 'sendTask';
    if (lowerName.includes('–ø–æ–ª—É—á') || lowerName.includes('–ø—Ä–∏–µ–º') || lowerName.includes('–ø–æ–ª—É—á–∞–µ—Ç')) return 'receiveTask';
    if (lowerName.includes('–∞–≤—Ç–æ–º–∞—Ç') || lowerName.includes('—Å–∏—Å—Ç–µ–º–∞') || lowerName.includes('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è') || lowerName.includes('–æ—Ç–º–µ–Ω—è–µ—Ç—Å—è')) return 'serviceTask';
    if (lowerName.includes('—É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è') || lowerName.includes('–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è')) return 'userTask';
    
    return 'userTask';
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–æ–≤ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
function createPoolsFromParticipants(participants) {
    if (participants.length === 0) {
        return [{
            id: 'Pool_1',
            name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å',
            lanes: []
        }];
    }
    
    if (participants.length === 1) {
        return [{
            id: 'Pool_1',
            name: participants[0],
            lanes: []
        }];
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const pools = [];
    const businessParticipants = participants.filter(p => 
        ['–∫–ª–∏–µ–Ω—Ç', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–∞–Ω–∞–ª–∏—Ç–∏–∫'].includes(p.toLowerCase())
    );
    const technicalParticipants = participants.filter(p => 
        ['—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'QA', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä', '—Å–∏—Å—Ç–µ–º–∞'].includes(p.toLowerCase())
    );
    const operationalParticipants = participants.filter(p => 
        ['–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '—Å–∫–ª–∞–¥', '–æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'].includes(p.toLowerCase())
    );
    const otherParticipants = participants.filter(p => 
        !businessParticipants.includes(p) && !technicalParticipants.includes(p) && !operationalParticipants.includes(p)
    );
    
    if (businessParticipants.length > 0) {
        pools.push({
            id: 'Pool_Business',
            name: '–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã',
            lanes: businessParticipants.map(p => ({ id: `Lane_${p}`, name: p }))
        });
    }
    
    if (technicalParticipants.length > 0) {
        pools.push({
            id: 'Pool_Technical',
            name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã',
            lanes: technicalParticipants.map(p => ({ id: `Lane_${p}`, name: p }))
        });
    }
    
    if (operationalParticipants.length > 0) {
        pools.push({
            id: 'Pool_Operational',
            name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã',
            lanes: operationalParticipants.map(p => ({ id: `Lane_${p}`, name: p }))
        });
    }
    
    if (otherParticipants.length > 0) {
        pools.push({
            id: 'Pool_Other',
            name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã',
            lanes: otherParticipants.map(p => ({ id: `Lane_${p}`, name: p }))
        });
    }
    
    return pools;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
function createMessageFlows(tasks, pools) {
    const flows = [];
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for (let i = 0; i < tasks.length - 1; i++) {
        const currentTask = tasks[i];
        const nextTask = tasks[i + 1];
        
        if (currentTask.participant !== nextTask.participant) {
            flows.push({
                id: `MessageFlow_${i + 1}`,
                sourceRef: currentTask.id,
                targetRef: nextTask.id,
                sourceParticipant: currentTask.participant,
                targetParticipant: nextTask.participant
            });
        }
    }
    
    return flows;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π BPMN 2.0 XML
 */
function createProfessionalBPMNXML(elements) {
    const processId = 'Process_' + Date.now();
    const collaborationId = 'Collaboration_' + Date.now();
    
    let xml = `<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" 
                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" 
                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" 
                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" 
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  id="Definitions_1" 
                  targetNamespace="http://bpmn.io/schema/bpmn"
                  exporter="AI BPMN Generator Pro"
                  exporterVersion="2.0.0">
  
  <bpmn:collaboration id="${collaborationId}">`;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å—ã
    elements.pools.forEach((pool, poolIndex) => {
        const processRef = `Process_${poolIndex + 1}`;
        xml += `
    <bpmn:participant id="${pool.id}" name="${pool.name}" processRef="${processRef}">`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ä–æ–∂–∫–∏
        if (pool.lanes.length > 0) {
            xml += `
      <bpmn:participant id="${pool.id}_Lanes" name="${pool.name}">`;
            pool.lanes.forEach(lane => {
                xml += `
        <bpmn:participant id="${lane.id}" name="${lane.name}" />`;
            });
            xml += `
      </bpmn:participant>`;
        }
        
        xml += `
    </bpmn:participant>`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    elements.messageFlows.forEach(flow => {
        xml += `
    <bpmn:messageFlow id="${flow.id}" sourceRef="${flow.sourceRef}" targetRef="${flow.targetRef}" />`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    xml += `
  </bpmn:collaboration>
  
  <bpmn:process id="${processId}" isExecutable="false">`;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    xml += `
    <bpmn:startEvent id="StartEvent_1" name="–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞">
      <bpmn:outgoing>Flow_1</bpmn:outgoing>
    </bpmn:startEvent>`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    elements.tasks.forEach((task, index) => {
        const flowId = `Flow_${index + 1}`;
        const nextFlowId = `Flow_${index + 2}`;
        
        xml += `
    <bpmn:${task.type} id="${task.id}" name="${task.name}">
      <bpmn:incoming>${flowId}</bpmn:incoming>
      <bpmn:outgoing>${nextFlowId}</bpmn:outgoing>
    </bpmn:${task.type}>`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —à–ª—é–∑—ã
    elements.decisions.forEach((decision, index) => {
        const taskIndex = elements.tasks.length + index;
        const flowId = `Flow_${taskIndex + 1}`;
        const nextFlowId = `Flow_${taskIndex + 2}`;
        
        xml += `
    <bpmn:${decision.type} id="${decision.id}" name="${decision.name}">
      <bpmn:incoming>${flowId}</bpmn:incoming>
      <bpmn:outgoing>${nextFlowId}</bpmn:outgoing>
    </bpmn:${decision.type}>`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–∏
    const totalElements = elements.tasks.length + elements.decisions.length;
    for (let i = 0; i <= totalElements; i++) {
        const flowId = `Flow_${i + 1}`;
        const sourceId = i === 0 ? 'StartEvent_1' : 
                        (i <= elements.tasks.length ? elements.tasks[i - 1].id : 
                         elements.decisions[i - elements.tasks.length - 1].id);
        const targetId = i === totalElements ? 'EndEvent_1' : 
                        (i < elements.tasks.length ? elements.tasks[i].id : 
                         elements.decisions[i - elements.tasks.length].id);
        
        xml += `
    <bpmn:sequenceFlow id="${flowId}" sourceRef="${sourceId}" targetRef="${targetId}" />`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    xml += `
    
    <bpmn:endEvent id="EndEvent_1" name="–ö–æ–Ω–µ—Ü –ø—Ä–æ—Ü–µ—Å—Å–∞">
      <bpmn:incoming>Flow_${totalElements + 1}</bpmn:incoming>
    </bpmn:endEvent>
  </bpmn:process>`;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    xml += `
  
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="${collaborationId}">`;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—ã –≤ –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    elements.pools.forEach((pool, poolIndex) => {
        const poolY = poolIndex * 250;
        const poolHeight = pool.lanes.length > 0 ? 200 : 150;
        
        xml += `
      <bpmndi:BPMNShape id="${pool.id}_di" bpmnElement="${pool.id}">
        <dc:Bounds x="50" y="${poolY + 50}" width="900" height="${poolHeight}" />
      </bpmndi:BPMNShape>`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ä–æ–∂–∫–∏
        if (pool.lanes.length > 0) {
            const laneWidth = Math.floor(900 / pool.lanes.length);
            pool.lanes.forEach((lane, laneIndex) => {
                const laneX = 50 + laneIndex * laneWidth;
                xml += `
        <bpmndi:BPMNShape id="${lane.id}_di" bpmnElement="${lane.id}">
          <dc:Bounds x="${laneX}" y="${poolY + 50}" width="${laneWidth}" height="${poolHeight}" />
        </bpmndi:BPMNShape>`;
            });
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    xml += `
      
      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –¥–∏–∞–≥—Ä–∞–º–º—É —Å —É—á–µ—Ç–æ–º –ø—É–ª–æ–≤
    elements.tasks.forEach((task, index) => {
        const x = 250 + index * 200;
        const y = getTaskYPosition(task, elements.pools);
        
        xml += `
      <bpmndi:BPMNShape id="${task.id}_di" bpmnElement="${task.id}">
        <dc:Bounds x="${x}" y="${y}" width="100" height="80" />
      </bpmndi:BPMNShape>`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —à–ª—é–∑—ã –≤ –¥–∏–∞–≥—Ä–∞–º–º—É
    elements.decisions.forEach((decision, index) => {
        const x = 250 + (elements.tasks.length + index) * 200;
        const y = 95;
        
        xml += `
      <bpmndi:BPMNShape id="${decision.id}_di" bpmnElement="${decision.id}">
        <dc:Bounds x="${x}" y="${y}" width="50" height="50" />
      </bpmndi:BPMNShape>`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –¥–∏–∞–≥—Ä–∞–º–º—É
    const endX = 250 + (elements.tasks.length + elements.decisions.length) * 200;
    xml += `
      
      <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">
        <dc:Bounds x="${endX}" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>`;

    return xml;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Y-–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É–ª–∞
 */
function getTaskYPosition(task, pools) {
    // –ù–∞—Ö–æ–¥–∏–º –ø—É–ª –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞–¥–∞—á–∏
    for (let i = 0; i < pools.length; i++) {
        const pool = pools[i];
        const lane = pool.lanes.find(l => l.name === task.participant);
        if (lane) {
            return 80 + i * 250 + 50; // –ü–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –ø—É–ª–∞
        }
    }
    
    // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—É–ª–∞—Ö, —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 80;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
async function displayGeneratedBPMN(bpmnXML) {
    if (!bpmnModeler) {
        throw new Error('BPMN Modeler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º XML –≤ modeler
        await bpmnModeler.importXML(bpmnXML);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º XML –∫–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        document.getElementById('xml-output').textContent = bpmnXML;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è BPMN:', error);
        throw error;
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function showGenerationStatus(message) {
    const status = document.getElementById('generation-status');
    const messageEl = document.getElementById('status-message');
    
    if (status) status.style.display = 'block';
    if (messageEl) messageEl.textContent = message;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function updateGenerationStatus(message) {
    const messageEl = document.getElementById('status-message');
    if (messageEl) messageEl.textContent = message;
}

/**
 * –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function hideGenerationStatus() {
    const status = document.getElementById('generation-status');
    if (status) status.style.display = 'none';
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function showGenerationError(message) {
    hideGenerationStatus();
    alert(`–û—à–∏–±–∫–∞: ${message}`);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é BPMN
 */
function showGeneratedBPMN() {
    hideGenerationStatus();
    
    const generated = document.getElementById('generated-bpmn');
    if (generated) generated.style.display = 'block';
    
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    generated.scrollIntoView({ behavior: 'smooth' });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
 */
function loadExample(type = 'default') {
    const examples = {
        default: `1. –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
2. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
3. –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
4. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ç –∏ –ø–µ—Ä–µ–¥–∞—é—Ç –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
5. QA —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
6. –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É`,
        
        product: `1. –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –∏–¥–µ—é –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
2. –ê–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞–µ—Ç –¢–ó
3. –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã
4. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ —Å–ø—Ä–∏–Ω—Ç–∞–º
5. QA –∏–Ω–∂–µ–Ω–µ—Ä —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —Å–ø—Ä–∏–Ω—Ç
6. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –¥–µ—Ñ–µ–∫—Ç—ã, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç
7. DevOps –∏–Ω–∂–µ–Ω–µ—Ä —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
8. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å`,
        
        medical: `1. –ü–∞—Ü–∏–µ–Ω—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É
2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞
3. –ü–∞—Ü–∏–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞
4. –í—Ä–∞—á –ø—Ä–æ–≤–æ–¥–∏—Ç –æ—Å–º–æ—Ç—Ä –∏ —Å—Ç–∞–≤–∏—Ç –¥–∏–∞–≥–Ω–æ–∑
5. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –∞–Ω–∞–ª–∏–∑—ã
6. –ü–∞—Ü–∏–µ–Ω—Ç —Å–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
7. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤—Ä–∞—á—É
8. –í—Ä–∞—á –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ª–µ—á–µ–Ω–∏–µ
9. –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`,
        
        hr: `1. –û—Ç–¥–µ–ª HR –ø–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
2. HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
3. –í–∞–∫–∞–Ω—Å–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
4. –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ä–µ–∑—é–º–µ
5. HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
6. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
7. –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É
8. –ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª–∞
9. –ü—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞
10. –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`,
        
        ecommerce: `1. –ö–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ
2. –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
3. –û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
4. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
5. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è
6. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏
8. –¢–æ–≤–∞—Ä—ã —É–ø–∞–∫–æ–≤—ã–≤–∞—é—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É
9. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É`
    };
    
    const description = examples[type] || examples.default;
    document.getElementById('process-description').value = description;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
 */
function clearForm() {
    document.getElementById('process-description').value = '';
    const generated = document.getElementById('generated-bpmn');
    if (generated) generated.style.display = 'none';
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ BPMN —Ñ–∞–π–ª–∞
 */
function downloadBPMN() {
    if (!currentBPMN) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ BPMN –¥–∏–∞–≥—Ä–∞–º–º—É');
        return;
    }
    
    const blob = new Blob([currentBPMN], { type: 'application/xml' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    
    link.href = url;
    link.download = `professional-process-${Date.now()}.bpmn`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π BPMN —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω');
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ XML –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
function copyXML() {
    if (!currentBPMN) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ BPMN –¥–∏–∞–≥—Ä–∞–º–º—É');
        return;
    }
    
    navigator.clipboard.writeText(currentBPMN).then(() => {
        alert('XML –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = currentBPMN;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('XML –∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    });
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
 */
function viewInEditor() {
    if (!currentBPMN) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ BPMN –¥–∏–∞–≥—Ä–∞–º–º—É');
        return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ bpmn.io
    const encodedXML = encodeURIComponent(currentBPMN);
    const url = `https://demo.bpmn.io/new?bpmn=${encodedXML}`;
    window.open(url, '_blank');
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ SVG –¥–∏–∞–≥—Ä–∞–º–º—ã
 */
async function downloadSVG() {
    if (!bpmnModeler) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ BPMN –¥–∏–∞–≥—Ä–∞–º–º—É');
        return;
    }

    try {
        const result = await bpmnModeler.saveSVG();
        const { svg } = result;
        
        const blob = new Blob([svg], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        
        link.href = url;
        link.download = 'professional-bpmn-diagram.svg';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('‚úÖ SVG –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–∫–∞—á–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è SVG:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ BPMN
 */
function loadSampleBPMN() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü
    const sampleXML = `<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" 
                  xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" 
                  xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" 
                  xmlns:di="http://www.omg.org/spec/DD/20100524/DI" 
                  id="Definitions_1" 
                  targetNamespace="http://bpmn.io/schema/bpmn">
  
  <bpmn:process id="Process_1" isExecutable="false">
    <bpmn:startEvent id="StartEvent_1" name="–ù–∞—á–∞–ª–æ">
      <bpmn:outgoing>Flow_1</bpmn:outgoing>
    </bpmn:startEvent>
    
    <bpmn:task id="Task_1" name="–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏">
      <bpmn:incoming>Flow_1</bpmn:incoming>
      <bpmn:outgoing>Flow_2</bpmn:outgoing>
    </bpmn:task>
    
    <bpmn:endEvent id="EndEvent_1" name="–ö–æ–Ω–µ—Ü">
      <bpmn:incoming>Flow_2</bpmn:incoming>
    </bpmn:endEvent>
    
    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />
    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />
  </bpmn:process>
  
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
      
      <bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">
        <dc:Bounds x="250" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
      
      <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">
        <dc:Bounds x="412" y="102" width="36" height="36" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>`;
    
    displayFileBPMN(sampleXML);
    showFileViewer();
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ BPMN —Ñ–∞–π–ª–∞
 */
async function displayFileBPMN(bpmnXML) {
    if (!fileViewer) {
        throw new Error('–§–∞–π–ª–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
        await fileViewer.importXML(bpmnXML);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ BPMN —Ñ–∞–π–ª–∞');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
 */
function showFileViewer() {
    const viewer = document.getElementById('file-viewer');
    if (viewer) viewer.style.display = 'block';
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
 */
function setupFileDrop() {
    const fileInput = document.getElementById('bpmn-file-input');
    
    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            loadBPMNFile(file);
        }
    });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ BPMN —Ñ–∞–π–ª–∞
 */
function loadBPMNFile(file) {
    const reader = new FileReader();
    
    reader.onload = function(e) {
        const content = e.target.result;
        displayFileBPMN(content);
        showFileViewer();
    };
    
    reader.onerror = function() {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    };
    
    reader.readAsText(file);
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º
 */
function zoomIn() {
    if (fileViewer) {
        const zoomScroll = fileViewer.get('zoomScroll');
        zoomScroll.stepZoom(1);
    }
}

function zoomOut() {
    if (fileViewer) {
        const zoomScroll = fileViewer.get('zoomScroll');
        zoomScroll.stepZoom(-1);
    }
}

function zoomReset() {
    if (fileViewer) {
        const canvas = fileViewer.get('canvas');
        canvas.zoom('fit-viewport');
    }
}

function zoomToFit(viewer) {
    if (viewer) {
        const canvas = viewer.get('canvas');
        canvas.zoom('fit-viewport', 'auto');
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
function setupNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            if (this.getAttribute('href').startsWith('#')) {
                e.preventDefault();
                
                navLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
                
                const targetId = this.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }
        });
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', debounce(() => {
        if (bpmnModeler) {
            bpmnModeler.get('canvas').resized();
        }
        if (fileViewer) {
            fileViewer.get('canvas').resized();
        }
    }, 250));

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case '=':
                case '+':
                    e.preventDefault();
                    zoomIn();
                    break;
                case '-':
                    e.preventDefault();
                    zoomOut();
                    break;
                case '0':
                    e.preventDefault();
                    zoomReset();
                    break;
            }
        }
    });
}

/**
 * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.generateBPMN = generateBPMN;
window.loadExample = loadExample;
window.clearForm = clearForm;
window.downloadBPMN = downloadBPMN;
window.copyXML = copyXML;
window.viewInEditor = viewInEditor;
window.downloadSVG = downloadSVG;
window.loadSampleBPMN = loadSampleBPMN;
window.zoomIn = zoomIn;
window.zoomOut = zoomOut;
window.zoomReset = zoomReset;
